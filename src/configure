#!/bin/sh

usage() { echo "Usage: $0 [ -p <install-prefix> | --prefix <install-prefix>]" 1>&2; exit 1; }

PREFIX="/usr/local"

case $1 in
    -p) PREFIX=$2;;
    --prefix=*) PREFIX=$(echo $1 | awk '{ print substr($0, 10)}');;
    "")  break;;
    *)  usage;;
esac

printf "checking for compiler..."
echo "int main() {" > test.c
echo "    return 0;" >> test.c
echo "}" >> test.c
cc -o test.o test.c > /dev/null 2> /dev/null
if test $? = 0; then
	echo "yes"
else
	echo "no"
	echo
	echo "ERROR: No compiler found!"
	exit
fi
rm -f test.c test.o

printf "checking for pg_config..."
pg_config > /dev/null
if test $? = 0; then
	echo "yes"
else
	echo "no"
	echo
	echo "ERROR:"
	echo "No pg_config found, if you haven't installed postgresql, then you must install it to compile envelope"
	echo "If you have installed postgresql, then you must put pg_config in your PATH"
	exit
fi

#### OS CHECK
## COMPILATION IS A LITTLE DIFFERENT FOR THE OS'S
libev="no"
libtre="no"
MANDIR="share/man"
printf "checking for platform..."
if test $(uname -s) = "Linux"; then
	LDFLAGS="-lm -lrt"
	CPPFLAGS="-D_GNU_SOURCE"
	echo "Linux"

	printf "checking for OpenSSL..."
	command -v openssl >/dev/null 2>&1 || {
		echo "no"
		echo >&2 "OpenSSL not found! Install it and re-run configure."
		exit 1
	}
	echo "yes"

elif test $(uname -s) = "Darwin"; then
	LDFLAGS="-lm"
	echo "Darwin"

	printf "checking for OpenSSL..."
	command -v openssl >/dev/null 2>&1 || {
		echo "no"
		echo >&2 "OpenSSL not found! Install it and re-run configure."
		exit 1
	}
	echo "yes"

elif test $(uname -s) = "FreeBSD"; then
	LDFLAGS="-lm -lintl"
	MANDIR="man"
	echo "FreeBSD"

	printf "checking for OpenSSL..."
	command -v openssl >/dev/null 2>&1 || {
		echo "no"
		echo >&2 "OpenSSL not found! Install it and re-run configure."
		exit 1
	}
	echo "yes"

elif test $(uname -s) = "OpenBSD"; then
	LDFLAGS="-lm -lintl"
	MANDIR="man"
	echo "OpenBSD"

else
	LDFLAGS="-lm"
	echo "Unknown"

	printf "checking for OpenSSL..."
	command -v openssl >/dev/null 2>&1 || {
		echo "no"
		echo >&2 "OpenSSL not found! Install it and re-run configure."
		exit 1
	}
	echo "yes"

fi

#### LIBPQ
LDFLAGS="$LDFLAGS -L$(pg_config --libdir) -lpq"
CPPFLAGS="$CPPFLAGS -I$(pg_config --includedir)"

#### OPENSSL
OPENSSL_PATH=$(command -v openssl)
SSL_INCLUDEDIR="${OPENSSL_PATH%bin/openssl}include"
SSL_LIBDIR="${OPENSSL_PATH%bin/openssl}lib"

CHECK_CPPFLAGS="-I$SSL_INCLUDEDIR"
HEADER="openssl/ssl.h"
. scripts/check_header
if test "x$HAVE_HEADER" = "x0"; then
	echo >&2 "Cannot use openssl/ssl.h! Install the OpenSSL headers and re-run configure."
	exit 1
fi

CPPFLAGS="$CPPFLAGS -I$SSL_INCLUDEDIR"
if test $(uname -s) = "Darwin"; then
	LDFLAGS="$LDFLAGS $SSL_LIBDIR/libssl.a $SSL_LIBDIR/libcrypto.a"
else
	LDFLAGS="$LDFLAGS -L$SSL_LIBDIR -lssl -lcrypto"
fi

#### LIBEV

USE_LRT="no"
libev_CPPFLAGS=""
CHECK_HEADERS="sys/inotify.h sys/epoll.h sys/event.h port.h poll.h sys/select.h sys/eventfd.h sys/signalfd.h"
for HEADER in $CHECK_HEADERS; do
	. scripts/check_header
	HEADER_VAR_NAME="HAVE_"$(echo "$HEADER" | tr '[a-z]' '[A-Z]' | tr '.' '_' | tr '/' '_')
	libev_CPPFLAGS="$libev_CPPFLAGS -D$HEADER_VAR_NAME""=$HAVE_HEADER"
done
CHECK_FUNCTIONS="inotify_init epoll_ctl kqueue port_create poll select eventfd signalfd"
for FUNCTION in $CHECK_FUNCTIONS; do
	. scripts/check_function
	CUR_FUNCTION_VAR_NAME="HAVE_"$(echo "$FUNCTION" | tr '[a-z]' '[A-Z]')
	libev_CPPFLAGS="$libev_CPPFLAGS -D$CUR_FUNCTION_VAR_NAME""=$HAVE_FUNCTION"
done
FUNCTION="clock_gettime"
. scripts/check_function
HAVE_SYSCALL_FUNCTION=0
if test $HAVE_FUNCTION = 1; then
	if test $(uname -s) = "Linux"; then
		printf "checking for clock_gettime syscall..."
		echo "#include <unistd.h>" > test.c
		echo "#include <sys/syscall.h>" >> test.c
		echo "#include <time.h>" >> test.c
		echo "int main(int argc) {" >> test.c
		echo "    struct timespec ts;" >> test.c
		echo "    int status = syscall(SYS_clock_gettime, CLOCK_REALTIME, &ts);" >> test.c
		echo "    return status == -1;" >> test.c
		echo "}" >> test.c
		cc -o test.o test.c > /dev/null 2> /dev/null
		if test $? = 0; then
			./test.o
			if test $? = 0; then
				libev_CPPFLAGS="$libev_CPPFLAGS -DHAVE_CLOCK_GETTIME_SYSCALL""=1"
				echo "yes"
			else
				echo "no"
			fi
		else
			echo "no"
		    if test -z "$LIBEV_M4_AVOID_LIBRT"; then
				. scripts/check_library "rt"
				if test $HAVE_LIBRARY = 1; then
					LDFLAGS="$LDFLAGS -lrt"
					CHECK_CFLAGS="-lrt"
					FUNCTION="clock_gettime"
					. scripts/check_function
					USE_LRT="yes"
				fi
			fi
		fi
		rm -f test.c test.o
	elif test $(uname -s) = "Darwin"; then
		printf "checking for clock_gettime at runtime""..."
		echo "#include <time.h>" > test.c
		echo "int main(int argc) {" >> test.c
		echo "    struct timespec test = {0};" >> test.c
		echo "    clock_gettime(CLOCK_REALTIME, &test);" >> test.c
		echo "    return 0;" >> test.c
		echo "}" >> test.c
		cc -o test.o test.c > /dev/null 2> /dev/null
		./test.o > /dev/null 2> /dev/null
		if test $? = 0; then
			HAVE_FUNCTION=1
			echo "yes"
		else
			HAVE_FUNCTION=0
			echo "no"
			echo "WARNING: It seems that the linker reports clock_gettime is present, but at runtime it isn't."
			echo "It is possible to encounter this on OS X 10.11 (El Capitan) if you have the macOS 10.12 (Sierra) SDK installed."
			echo "This is an unsupported configuration and you should wither upgrade to 10.12, or downgrade your SDK."
			echo "Press [ENTER] to continue anyway."
			read
		fi
		rm -f test.c test.o
	fi
fi
libev_CPPFLAGS="$libev_CPPFLAGS -DHAVE_CLOCK_GETTIME""=$HAVE_FUNCTION"
FUNCTION="nanosleep"
. scripts/check_function
if test -z "$LIBEV_M4_AVOID_LIBRT" && test $USE_LRT = "no"; then
	LIBRARY="rt"
	. scripts/check_library
	if test $HAVE_LIBRARY = 1; then
		LDFLAGS="$LDFLAGS -lrt"
		FUNCTION="nanosleep"
		. scripts/check_function
		libev_CPPFLAGS="$libev_CPPFLAGS -DHAVE_NANOSLEEP""=$HAVE_FUNCTION"
	fi
fi
if test -z "$LIBEV_M4_AVOID_LIBM"; then
	LIBRARY="m"
	. scripts/check_library "m"
	if test $HAVE_LIBRARY = 1; then
		LDFLAGS="$LDFLAGS -lm"
		CHECK_CFLAGS="-lm"
		FUNCTION="floor"
		. scripts/check_function
		libev_CPPFLAGS="$libev_CPPFLAGS -DHAVE_FLOOR""=$HAVE_FUNCTION"
	else
		FUNCTION="floor"
		. scripts/check_function
		libev_CPPFLAGS="$libev_CPPFLAGS -DHAVE_FLOOR""=$HAVE_FUNCTION"
	fi
else
	FUNCTION="floor"
	. scripts/check_function
	libev_CPPFLAGS="$libev_CPPFLAGS -DHAVE_FLOOR""=$HAVE_FUNCTION"
fi

#### ADD LIBTRE FLAGS
## we always use the one we ship (0.8.0)
if test $libtre = "no"; then
	CPPFLAGS="$CPPFLAGS -DTRE_APPROX=0 -DTRE_REGEX_T_FIELD=value"

	FUNCTION="isascii"
	. scripts/check_function
	libtre_CPPFLAGS="$libtre_CPPFLAGS -DHAVE_ISASCII""=$HAVE_FUNCTION"
	FUNCTION="isblank"
	. scripts/check_function
	libtre_CPPFLAGS="$libtre_CPPFLAGS -DHAVE_ISABLANK""=$HAVE_FUNCTION"
fi

#### POSTGRESQL CHECK
## POSTGRES CHANGED THE NAME OF A CONFIG FILE PARAMETER, WHEN WE TEST WE NEED TO KNOW WHICH ONE TO USE
printf "checking for PostgreSQL version >= 9.3.0 (parameter rename)..."
# check PostgreSQL version
has_new_sock_directory_parameter_postgres=$(pg_config --version | awk "{split(\$2,a,\".\"); print (a[1] >= 9) && (a[2] >= 3) && (a[3] >= 0)}")
directory_parameter=""
if test "x$has_new_sock_directory_parameter_postgres" = "x1"; then
	has_new_sock_directory_parameter_postgres=yes
	directory_parameter="unix_socket_directories"
else
	has_new_sock_directory_parameter_postgres=no
	directory_parameter="unix_socket_directory"
fi
echo "$has_new_sock_directory_parameter_postgres"

#### CONFIGURE MAKEFILE
sed -e "s|@sock_dir_parameter@|$directory_parameter|g" \
	-e "s|@LDFLAGS@|$LDFLAGS|g" \
	-e "s|@CPPFLAGS@|$CPPFLAGS|g" \
	-e "s|@BUILD_DEPS@|$BUILD_DEPS|g" \
	-e "s|@prefix@|$PREFIX|g" \
	-e "s|@MANDIR@|$MANDIR|g" \
	-e "s|@libev_CPPFLAGS@|$libev_CPPFLAGS|g" \
	-e "s|@libtre_CPPFLAGS@|$libtre_CPPFLAGS|g" \
	-e "s|@compat@|$COMPAT|g" \
	-e "s|@make@|$MAKE|g" < Makefile.in > Makefile

#### CONFIGURE MAN PAGE
sed -e "s/@prefix@/\/usr\/local/g" < man/man1/envelope.1.in > man/man1/envelope.1


echo
echo
echo "   ######################################################################################################"
echo "   # ##                                                                                              ## #"
echo "   #     ##                            Thank you for choosing envelope!                          ##     #"
echo "   #         ##                                                                              ##         #"
echo "   #             ##             If you have any trouble installing envelope,             ##             #"
echo "   #                 ##      don't hesitate to email nunzio@workflowproducts.com     ##                 #"
echo "   #                     ##               or call 817-503-9545 CST               ##                     #"
echo "   #                         ##               for free support               ##                         #"
echo "   #                             ##                                      ##                             #"
echo "   #                                 ##                              ##                                 #"
echo "   #                                     ##                      ##                                     #"
echo "   #                                         ##              ##                                         #"
echo "   #                                             ##      ##                                             #"
echo "   #                                         ##     ####     ##                                         #"
echo "   #                                     ##                      ##                                     #"
echo "   #                                 ##                              ##                                 #"
echo "   #                             ##                                      ##                             #"
echo "   #                         ##                                              ##                         #"
echo "   #                     ##                                                      ##                     #"
echo "   #                 ##                                                              ##                 #"
echo "   #             ##                                                                      ##             #"
echo "   #         ##                                                                              ##         #"
echo "   #     ##                                                                                      ##     #"
echo "   # ##                                                                                              ## #"
echo "   ######################################################################################################"
